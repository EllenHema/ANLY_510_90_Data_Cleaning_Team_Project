ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
Imatrix4
library(RcppEigen)
> gaussianElimination(A-Imatrix4)
gaussianElimination(A-Imatrix4)
install.packages("MASS")
library(MASS)
install.packages("optR")
library(optR)
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
ea2 <- gaussianElimination(A-Imatrix4)
ea2[4,4] = -1
ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
library(RcppEigen)
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
ea2 <- gaussianElimination(A-Imatrix4)
ea2[4,4] = -1
ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
ea2 <- gaussianElimination(A-Imatrix4)
ea2[4,4] = -1
ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
library(Matrix)
libary(matpow)
library(matpow)
library(matlib)
library(pracma)
library(RcppEigen)
library(matrixcalc)
install.packages("igraph", dependencies = TRUE)
library(igraph)
library(expm)
library(expm)
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
ea2 <- gaussianElimination(A-Imatrix4)
ea2[4,4] = -1
ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
ea2 <- gaussianElimination(A-Imatrix4)
## 3. Set-up the link (connectivity) matrix
A <- matrix(c(0, 0, 1, 1/2, 1/3, 0, 0, 0, 1/3, 1/2, 0, 1/2, 1/3, 1/2, 0, 0),4,4, byrow = TRUE)
## 4. Use the first method to compute the pageRanks
Imatrix4 <- matrix(c(1,0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 4, 4, byrow = TRUE)
ea2 <- gaussianElimination(A-Imatrix4)
ea2[4,4] = -1
ea2_wholeNumbers <- ea2*-6
ea2_wholeNumbers
ea2_scaled <- ea2_wholeNumbers/31
ea2_scaled[,4]
## 5. Find and normalize the dominant eigenvector to compute the pageRanks
ea <- eigen(A)
ea
## 5. Find and normalize the dominant eigenvector to compute the pageRanks
ea <- eigen(A)
ea
# normalize the dominant eigenvector values
nr_scaled_values <- length(ea$vectors[,1])
ea_vectors <- ea$vectors[,1]
sca <- sum(ea$vectors)
for(i in 1:nr_scaled_values){
ea_vectors[i] <- ea$vectors[i]/sca
}
ea_vectors
## automate the process to determine pageRank
##
## first set-up a representative webgraph
##
g <- graph(c(1, 2, 1, 3, 1, 4, 2, 3, 2, 4, 3, 1, 4, 1, 4, 3), directed = TRUE)
# plot the webgraph
tkplot(g)
## automate the process to determine pageRank
##
## first set-up a representative webgraph
##
g <- graph(c(1, 2, 1, 3, 1, 4, 2, 3, 2, 4, 3, 1, 4, 1, 4, 3), directed = TRUE)
# plot the webgraph
tkplot(g)
## automate the process to determine pageRank
##
## first set-up a representative webgraph
##
g <- graph(c(1, 2, 1, 3, 1, 4, 2, 3, 2, 4, 3, 1, 4, 1, 4, 3), directed = TRUE)
# plot the webgraph
tkplot(g)
## 6.  This finds the modified matrix M
B = get.adjacency(g, sparse = FALSE)
B = t(B / rowSums(B))
B
n = nrow(B)
U = matrix(data = rep(1/n, n^2), nrow = n, ncol = n)
U
beta = 0.85
M = beta*B + (1-beta)*U
M
## 7.  Calculate the eigenvalues/eigenvectors of M
e = eigen(M)
v <- e$vectors[,1]
#Scale the values of the dominant eigenvector of M to get the pageRanks
v <- as.numeric(v) / sum(as.numeric(v))
v
## 8.  Now use the page_rank() function to find the pageRanks
page_rank(g)$vector
## 9.  Now use a slightly different method to compute the pageRanks of M
library(expm)
n = nrow(M)
U = matrix(data=rep(1/n, n^2), nrow = n, ncol = n)
U
beta = 0.85
C = beta*B + (1-beta)*U
C
r = matrix(data = rep(1/n, n), nrow = n, ncol = 1)
r
install.packages("arpack")
library(arpack)
## 10. Use the power method to compute page ranks by setting the number of
##    iterations as 100
pageRanks <- t(C%^%100 %*% r)
pageRanks
## 11. Use the power method to compute page ranks using convergence criteria
set.seed(1234)
n <- length(M[,1])
iter <- 1
maxiter <- 1000
tolerance <- 0.00001
ccrit <- 100
pwr <- M %*% M
ckCC <- matrix(nrow=n, ncol=maxiter)
ckCC[1,1] <- 100
while((abs(ccrit) > tolerance) && (iter < maxiter)) {
iter <- iter + 1
pwr <- M %*% pwr
PRout <- pwr %*% r
ckCC[,iter] <- PRout[,]
ccrit <- ckCC[1,iter-1] - ckCC[1,iter]
}
print(iter)
print(t(PRout))
library(readr)
movie_metadata <- read_csv("~/Desktop/America Dream/Final Return - Promised Land /HU/Courses/2017 Sem 1 Spring/ANLY 500 PRINCIPLES OF ANALYTICS I/research proposal/movie_metadata.csv")
View(movie_metadata)
## Setup library and import data
getwd()
setwd("/Users/Hemaguaiguai/Desktop")
movie<-read.csv("movie_metadata.csv",header=T,stringsAsFactors = F)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
##remove duplicated cases
str(movie)
which(duplicated(movie))
movie.nodup<-movie[!duplicated(movie),]
str(movie.nodup)
## Remove non-completed cases
movie.final<-movie.nodup[complete.cases(movie.nodup),]
str(movie.final)
sum(is.na(movie.final))
colSums(is.na(movie.final))
## Summary dataset
str(movie.final)
summary(movie.final)
## number of movies by country
country_num<-as.data.frame(table(movie.final$country))
country_num<-arrange(country_num,desc(Freq))
c<-ggplot(head(country_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Country",y="Number of movies") + ggtitle("Top 10 Most Movie Countries")
## number of movies by genres
genre_num<-as.data.frame(table(movie.final$genres))
genre_num<-arrange(genre_num,desc(Freq))
c<-ggplot(head(genre_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="blue")+coord_flip()+labs(x="Genres",y="Number of movies") + ggtitle("Top 10 Most Movie Genres")
## IMDB Score by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","imdb_score")],aes(factor(genres),imdb_score))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="IMDB Score") + ggtitle("IMDB Score Distribution by Genres")
## Duration by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","duration")],aes(factor(genres),duration))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="duration") + ggtitle("Duration Distribution by Genres")
## number of movies by director (graph) / exclude 1 movie directors for IMDB Score analysis
director_num<-as.data.frame(table(movie.final$director_name))
directors_num<-arrange(director_num,desc(Freq))
c<-ggplot(head(directors_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Directors",y="Number of movies") + ggtitle("Top 10 Most Movie Directors")
director_num_order<-order(director_num$Freq,decreasing=T)
director_num_sorted<-director_num[director_num_order,]
table(director_num_sorted$Freq)
dir_num_final <- director_num_sorted[director_num_sorted$Freq>=2,c("Var1","Freq")]
dire_num_subset<-movie.final[movie.final$director_name%in%dir_num_final$Var1,c("director_name","imdb_score")]
## number of movies by actors (graph) / exclude 1 movie actors for IMDB Score analysis
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num<-arrange(actor_num,desc(Freq))
c<-ggplot(head(actor_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="green")+coord_flip()+labs(x="Actors",y="Number of movies") + ggtitle("Top 10 Most Movie Actors")
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num_order<-order(actor_num$Freq,decreasing=T)
actor_num_sorted<-actor_num[actor_num_order,]
table(actor_num_sorted$Freq)
act_num_final <- actor_num_sorted[actor_num_sorted$Freq>=2,c("Var1","Freq")]
act_num_subset<-movie.final[movie.final$actor_1_name%in%dir_num_final$Var1,c("actor_1_name","imdb_score")]
## top director with highest avg IMDB Score
attach(dire_num_subset)
director_score<-as.data.frame(tapply(imdb_score,director_name,mean))
colnames(director_score)<-"mean_score"
director_score_sorted<-sort(director_score$mean_score,decreasing=T)
director_score_top <- as.data.frame(head(director_score_sorted,30))
director_score_top$director_name<-rownames(director_score_top)
colnames(director_score_top)<-c("mean_score","director_name")
director_score_top
detach(dire_num_subset)
##top actors with highest avg IMDB Score
attach(act_num_subset)
actor_score<-as.data.frame(tapply(imdb_score,actor_1_name,mean))
colnames(actor_score)<-"mean_score"
actor_score_sorted<-sort(actor_score$mean_score,decreasing=T)
actor_score_top <- as.data.frame(head(actor_score_sorted,30))
actor_score_top$actor_name<-rownames(actor_score_top)
colnames(actor_score_top)<-c("mean_score","actor_name")
actor_score_top
detach(act_num_subset)
getwd()
##remove duplicated cases
str(movie)
which(duplicated(movie))
movie.nodup<-movie[!duplicated(movie),]
str(movie.nodup)
## Remove non-completed cases
movie.final<-movie.nodup[complete.cases(movie.nodup),]
str(movie.final)
sum(is.na(movie.final))
colSums(is.na(movie.final))
## Setup library and import data
getwd()
setwd("/Users/Hemaguaiguai/Desktop")
movie<-read.csv("movie_metadata.csv",header=T,stringsAsFactors = F)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
##remove duplicated cases
str(movie)
which(duplicated(movie))
movie.nodup<-movie[!duplicated(movie),]
str(movie.nodup)
## Remove non-completed cases
movie.final<-movie.nodup[complete.cases(movie.nodup),]
str(movie.final)
sum(is.na(movie.final))
colSums(is.na(movie.final))
## Summary dataset
str(movie.final)
summary(movie.final)
## number of movies by country
country_num<-as.data.frame(table(movie.final$country))
country_num<-arrange(country_num,desc(Freq))
c<-ggplot(head(country_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Country",y="Number of movies") + ggtitle("Top 10 Most Movie Countries")
## number of movies by genres
genre_num<-as.data.frame(table(movie.final$genres))
genre_num<-arrange(genre_num,desc(Freq))
c<-ggplot(head(genre_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="blue")+coord_flip()+labs(x="Genres",y="Number of movies") + ggtitle("Top 10 Most Movie Genres")
## IMDB Score by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","imdb_score")],aes(factor(genres),imdb_score))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="IMDB Score") + ggtitle("IMDB Score Distribution by Genres")
## Duration by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","duration")],aes(factor(genres),duration))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="duration") + ggtitle("Duration Distribution by Genres")
## number of movies by director (graph) / exclude 1 movie directors for IMDB Score analysis
director_num<-as.data.frame(table(movie.final$director_name))
directors_num<-arrange(director_num,desc(Freq))
c<-ggplot(head(directors_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Directors",y="Number of movies") + ggtitle("Top 10 Most Movie Directors")
director_num_order<-order(director_num$Freq,decreasing=T)
director_num_sorted<-director_num[director_num_order,]
table(director_num_sorted$Freq)
dir_num_final <- director_num_sorted[director_num_sorted$Freq>=2,c("Var1","Freq")]
dire_num_subset<-movie.final[movie.final$director_name%in%dir_num_final$Var1,c("director_name","imdb_score")]
## number of movies by actors (graph) / exclude 1 movie actors for IMDB Score analysis
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num<-arrange(actor_num,desc(Freq))
c<-ggplot(head(actor_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="green")+coord_flip()+labs(x="Actors",y="Number of movies") + ggtitle("Top 10 Most Movie Actors")
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num_order<-order(actor_num$Freq,decreasing=T)
actor_num_sorted<-actor_num[actor_num_order,]
table(actor_num_sorted$Freq)
act_num_final <- actor_num_sorted[actor_num_sorted$Freq>=2,c("Var1","Freq")]
act_num_subset<-movie.final[movie.final$actor_1_name%in%dir_num_final$Var1,c("actor_1_name","imdb_score")]
## top director with highest avg IMDB Score
attach(dire_num_subset)
director_score<-as.data.frame(tapply(imdb_score,director_name,mean))
colnames(director_score)<-"mean_score"
director_score_sorted<-sort(director_score$mean_score,decreasing=T)
director_score_top <- as.data.frame(head(director_score_sorted,30))
director_score_top$director_name<-rownames(director_score_top)
colnames(director_score_top)<-c("mean_score","director_name")
director_score_top
detach(dire_num_subset)
##top actors with highest avg IMDB Score
attach(act_num_subset)
actor_score<-as.data.frame(tapply(imdb_score,actor_1_name,mean))
colnames(actor_score)<-"mean_score"
actor_score_sorted<-sort(actor_score$mean_score,decreasing=T)
actor_score_top <- as.data.frame(head(actor_score_sorted,30))
actor_score_top$actor_name<-rownames(actor_score_top)
colnames(actor_score_top)<-c("mean_score","actor_name")
actor_score_top
detach(act_num_subset)
install.packages("ggplot2")
## Setup library and import data
getwd()
setwd("/Users/Hemaguaiguai/Desktop")
movie<-read.csv("movie_metadata.csv",header=T,stringsAsFactors = F)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
##remove duplicated cases
str(movie)
which(duplicated(movie))
movie.nodup<-movie[!duplicated(movie),]
str(movie.nodup)
## Remove non-completed cases
movie.final<-movie.nodup[complete.cases(movie.nodup),]
str(movie.final)
sum(is.na(movie.final))
colSums(is.na(movie.final))
## Summary dataset
str(movie.final)
summary(movie.final)
## number of movies by country
country_num<-as.data.frame(table(movie.final$country))
country_num<-arrange(country_num,desc(Freq))
c<-ggplot(head(country_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Country",y="Number of movies") + ggtitle("Top 10 Most Movie Countries")
## number of movies by genres
genre_num<-as.data.frame(table(movie.final$genres))
genre_num<-arrange(genre_num,desc(Freq))
c<-ggplot(head(genre_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="blue")+coord_flip()+labs(x="Genres",y="Number of movies") + ggtitle("Top 10 Most Movie Genres")
## IMDB Score by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","imdb_score")],aes(factor(genres),imdb_score))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="IMDB Score") + ggtitle("IMDB Score Distribution by Genres")
## Duration by Genre
genre_num_top<-head(genre_num,10)
b<-ggplot(movie.final[movie.final$genres%in%genre_num_top$Var1,c("genres","duration")],aes(factor(genres),duration))
b+geom_boxplot(aes(fill=factor(genres)))+labs(x="Genres",y="duration") + ggtitle("Duration Distribution by Genres")
## number of movies by director (graph) / exclude 1 movie directors for IMDB Score analysis
director_num<-as.data.frame(table(movie.final$director_name))
directors_num<-arrange(director_num,desc(Freq))
c<-ggplot(head(directors_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="red")+coord_flip()+labs(x="Directors",y="Number of movies") + ggtitle("Top 10 Most Movie Directors")
director_num_order<-order(director_num$Freq,decreasing=T)
director_num_sorted<-director_num[director_num_order,]
table(director_num_sorted$Freq)
dir_num_final <- director_num_sorted[director_num_sorted$Freq>=2,c("Var1","Freq")]
dire_num_subset<-movie.final[movie.final$director_name%in%dir_num_final$Var1,c("director_name","imdb_score")]
## number of movies by actors (graph) / exclude 1 movie actors for IMDB Score analysis
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num<-arrange(actor_num,desc(Freq))
c<-ggplot(head(actor_num,10),aes(x=reorder(factor(Var1),Freq),y=Freq,alpha=Freq))
c+geom_bar(stat = "identity",fill="green")+coord_flip()+labs(x="Actors",y="Number of movies") + ggtitle("Top 10 Most Movie Actors")
actor_num<-as.data.frame(table(movie.final$actor_1_name))
actor_num_order<-order(actor_num$Freq,decreasing=T)
actor_num_sorted<-actor_num[actor_num_order,]
table(actor_num_sorted$Freq)
act_num_final <- actor_num_sorted[actor_num_sorted$Freq>=2,c("Var1","Freq")]
act_num_subset<-movie.final[movie.final$actor_1_name%in%dir_num_final$Var1,c("actor_1_name","imdb_score")]
## top director with highest avg IMDB Score
attach(dire_num_subset)
director_score<-as.data.frame(tapply(imdb_score,director_name,mean))
colnames(director_score)<-"mean_score"
director_score_sorted<-sort(director_score$mean_score,decreasing=T)
director_score_top <- as.data.frame(head(director_score_sorted,30))
director_score_top$director_name<-rownames(director_score_top)
colnames(director_score_top)<-c("mean_score","director_name")
director_score_top
detach(dire_num_subset)
##top actors with highest avg IMDB Score
attach(act_num_subset)
actor_score<-as.data.frame(tapply(imdb_score,actor_1_name,mean))
colnames(actor_score)<-"mean_score"
actor_score_sorted<-sort(actor_score$mean_score,decreasing=T)
actor_score_top <- as.data.frame(head(actor_score_sorted,30))
actor_score_top$actor_name<-rownames(actor_score_top)
colnames(actor_score_top)<-c("mean_score","actor_name")
actor_score_top
detach(act_num_subset)
library(ggplot2)
Install(dplyr)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
install.packages("dplyr")
library(dplyr)
library(Rcpp)
data(movies)
install.packages("dplyr")
View(m_or_over30)
data(movie_metadata)
library(ggplot2)
install.packages("dplyr")
library(dplyr)
library(Rcpp)
## Output is hidden
library(GGally)
library(memisc)
library(gridExtra)
## install.packages("ellipse")
library(ellipse) ## for fancy correlation matrix
## Simulate Bayesian Binomial updating
sim_bayes<-function(p=0.5,N=10,y_lim=15)
{
success<-0
curve(dbeta(x,1,1),xlim=c(0,1),ylim=c(0,y_lim),xlab='p',ylab='Posterior Density',lty=2)
legend('topright',legend=c('Prior','Updated Posteriors','Final Posterior'),lty=c(2,1,1),col=c('black','black','red'))
for(i in 1:N)
{
if(runif(1,0,1)<=p)
success<-success+1
curve(dbeta(x,success+1,(i-success)+1),add=TRUE)
print(paste(success,"successes and ",i-success," failures"))
}
curve(dbeta(x,success+1,(i-success)+1),add=TRUE,col='red',lwd=1.5)
}
sim_bayes(p=0.6,N=90)
level of ozone in different gardens as follows
GardenA_bigger <- rnorm(n=100, mean=30, sd=3)
str(GardenA_bigger)
library(readxl)
garden <- read_excel("~/Desktop/American Dream/Final Return - Promised Land /HU/Courses/2017 Sem 1 Spring/ANLY 502.91 ANLY Methods/QUIZ 2/garden.xlsx")
View(garden)
pnorm(q = 4, mean = 3, sd = 1.3333, lower.tail = TRUE)
rnorm(n=100, mean=30, sd=3)
GardenA_bigger <- dbinom(30, size=100, sd=3)
GardenA_bigger <- rnorm(n=100, mean=3, sd=1.15)
rnorm(n=100, mean=3, sd=1.15)
rnorm(n=100, mean=3, sd=1.333)
pnorm(q = 4, mean = 3, sd = 1.15, lower.tail = TRUE)
sd(gardenA, na.rm = FALSE)
sd(garden)
sd(garden, na.rm = FALSE)
View(garden)
sd(garden$`Garden A`)
sd(garden$`Garden B`)
a <- c(3,4,4,3,2,3,1,3,5,2)
sd(a)
var(a)
mean(a)
pnorm(q = 4, mean = 3, sd = 1.15, lower.tail = TRUE)
pnorm(q = 4, mean = 3, sd = 1.3333, lower.tail = TRUE)
pnorm(q = 4, mean = 3, sd = 1.3333, higher.tail = TRUE)
pnorm(q = 4, mean = 3, sd = 1.3333, lower.tail = FALSE)
library(MASS)
> SS <- expand.grid(toss1 = 0:1, toss2 = 0:1) > SCT <- apply(SS, 1, sum)
> PDF <- fractions(table(SCT)/8)
> PDF
SS <- expand.grid(toss1 = 0:1, toss2 = 0:1)
SCT <- apply(SS, 1, sum)
PDF <- fractions(table(SCT)/8)
PDF
pnorm(50, 100, 2.6832)
pnorm(75, 100, 2.6832)
qnorm(0.99, 100, 2.6832)
pnorm(50, 50, 2.6832)
pnorm(75, 50, 2.6832)
qnorm(100, 50, 2.6832)
pnorm(100, 100, 2.6832)
pnorm(75, 100, 2.6832)
pnorm(50, 100, 2.6832)
library(ggplot2)
x <- 9900:10100
fake_dist <- dnorm(x, mean=10000, sd=10)
real_dist <- dbinom(x, size=1000, p=.35)
posterior_dist <- calc_prob(x)
# make the data
data <- data.frame(x=rep(x, 2), freq=c(fake_dist, real_dist),
distribution=rep(c("Fake Normal(10000, 10)", "Real Binomial(1000, .35)"), each=length(x)))
# plot the data
g <- ggplot(data, aes(x=x, y=freq, group=distribution))
g + geom_line(aes(colour=distribution), size=1) + xlab("# of heads") + ylab("Density") +
opts(title="Distribution for fake and real experiment")
ggsave("cointoss.pdf")
View(A)
view(airquality)
airquality
install.packages("rmarkdown")
library(rmarkdown)
View(mtcars)
str(mtcars)
getwd()
help.setwd()
getwd()
